# ------ Set Options for Projects --------------- #
MESSAGE( STATUS "Set Options for Project")

## CMake minimun version required
CMAKE_MINIMUM_REQUIRED( VERSION 3.11 )

## Make Project Name
SET( PROJECT_NAME "MemoryProject" )
## Project name
PROJECT( ${PROJECT_NAME} )

SET(CMAKE_BUILD_TYPE Debug)
if( MSVC )
	MESSAGE( STATUS "Compiler is ${CMAKE_CXX_COMPILER_ID}")
    # Use multi-process debugging
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Zi /MP")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /Zi /MP")

    # Use Windbg as the debugger
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /DEBUG:FULL")
    set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} /DEBUG:FULL")
    set(CMAKE_LINKER_FLAGS_DEBUG "${CMAKE_LINKER_FLAGS_DEBUG} /DEBUG /INCREMENTAL:NO")
endif()

## Set CXX Compiler Version
SET( CMAKE_CXX_STANDARD 17 )
## Set Exe file place
SET( RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR} )

MESSAGE( STATUS "Setting Done")
# ----------------------------------------------- #



# ------ Set Path ------------------------------ #
MESSAGE( STATUS "Set Path ")

## Set Directories
SET( MAIN_DIR ${CMAKE_SOURCE_DIR} )
SET( DEMOFILE_DIR ${MAIN_DIR}/demofile )
SET( MEMORYMANAGER_DIR ${MAIN_DIR}/MemoryManager )
SET( MEMORYPOOL_DIR ${MAIN_DIR}/OnlyMemoryPool )
SET( SOURCE_DIR )
SET( FOLDER_DIR )

MESSAGE( STATUS "Setting Done ")
# ------------------------------------------------ #



# ------- Set Option ----------------------------- #
MESSAGE( STATUS "Set Option" )

## Set Option for the library is dynamics or static, the main install is memory manager or memory pool and the demo file is installed or not
OPTION( BUILD_STATIC_LIBRARY "Set option for the library which is static or dynamic" ON )
OPTION( INSTALL_MEMORY_MANAGER "Install Memory Manager or Memory Pool" ON )
OPTION( INSTALL_DEMO_FILE "Install demofile for memorymanager" ON )
## Set Option for install lib, header files' path
SET( INCLUDE_DIR ${MAIN_DIR}/include CACHE PATH "Header files Path" )
SET( LIB_DIR ${MAIN_DIR}/lib CACHE PATH "Library files Path" )
SET( BIN_DIR ${MAIN_DIR}/bin CACHE PATH "Execute files Path" )
SET( CMAKE_BUILD_TYPE Debug CACHE STRING "Build Type")

INCLUDE( Dependency.cmake )

MESSAGE( STATUS ${CMAKE_BUILD_TYPE} )

IF ( INSTALL_DEMO_FILE )
    ADD_SUBDIRECTORY( ${DEMOFILE_DIR} )
    MESSAGE( STATUS "Install Demofile that use MemoryManager" )
ELSE()
    MESSAGE( STATUS "Do not install Demofile" )
ENDIF()

IF ( INSTALL_MEMORY_MANAGER )
    INCLUDE_DIRECTORIES( ${MEMORYMANAGER_DIR} )
    LIST( APPEND FOLDER_DIR ${MEMORYMANAGER_DIR} )
    LIST( APPEND SOURCE_DIR 
        ${FOLDER_DIR}/IMemoryPool.h 
        ${FOLDER_DIR}/MemoryPool.h
        ${FOLDER_DIR}/MemoryManager.h ${FOLDER_DIR}/MemoryManager.cpp
        )
    MESSAGE( STATUS "Install Memory Manager" )
ELSE()
    INCLUDE_DIRECTORIES( ${MEMORYPOOL_DIR} )
    LIST( APPEND FOLDER_DIR ${MEMORYPOOL_DIR} )
    LIST( APPEND SOURCE_DIR 
        ${FOLDER_DIR}/MemoryPool.h ${FOLDER_DIR}/MemoryPool.cpp
        )
    MESSAGE( STATUS "Install only Memory Pool" )
ENDIF()

MESSAGE( STATUS "Setting Done ")
# ----------------------------------------------- #



# ------ Create library ---------------- #
MESSAGE(STATUS "Create Library ")

IF ( BUILD_STATIC_LIBRARY )
    ADD_LIBRARY( ${PROJECT_NAME} STATIC ${SOURCE_DIR} )
    MESSAGE( STATUS "Build library as a static" )
    MESSAGE( STATUS ${PROJECT_NAME})
ELSE ()
    ADD_LIBRARY( ${PROJECT_NAME} SHARED ${SOURCE_DIR} )
    MESSAGE( STATUS "Build library as a dynamic" )
ENDIF()

IF ( CMAKE_BUILD_TYPE MATCHES Debug )
    SET_TARGET_PROPERTIES( ${PROJECT_NAME} PROPERTIES
        ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${LIB_DIR}
        LIBRARY_OUTPUT_DIRECTORY_DEBUG ${LIB_DIR}
        RUNTIME_OUTPUT_DIRECTORY_DEBUG ${BIN_DIR}
    )
    MESSAGE( STATUS "Build library on Debug mode" )
ELSEIF ( CMAKE_BUILD_TYPE MATCHES Release )
    SET_TARGET_PROPERTIES( ${PROJECT_NAME} PROPERTIES
        ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${LIB_DIR}
        LIBRARY_OUTPUT_DIRECTORY_RELEASE ${LIB_DIR}
        RUNTIME_OUTPUT_DIRECTORY_RELEASE ${BIN_DIR}
    )
    MESSAGE( STATUS "Build library on Release mode" )
ELSE()
    SET_TARGET_PROPERTIES( ${PROJECT_NAME} PROPERTIES
        ARCHIVE_OUTPUT_DIRECTORY ${LIB_DIR}
        LIBRARY_OUTPUT_DIRECTORY ${LIB_DIR}
        RUNTIME_OUTPUT_DIRECTORY ${BIN_DIR}
    )
    MESSAGE( STATUS "Build library on Other mode" )
ENDIF()

FILE( COPY ${FOLDER_DIR}/ DESTINATION ${INCLUDE_DIR}
    FILES_MATCHING PATTERN "*.h" )

MESSAGE( STATUS "Creating Done ")
# ----------------------------------------------- #



# ------ Set Options for Target Files ----------- #
MESSAGE(STATUS "Set Options for Target Files")

TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC ${INCS} ${DEP_INCLUDE})
TARGET_LINK_DIRECTORIES(${PROJECT_NAME} PUBLIC ${DEP_LIB_DIR})
TARGET_LINK_LIBRARIES(${PROJECT_NAME} PUBLIC ${DEP_LIBS})
ADD_DEPENDENCIES(${PROJECT_NAME} ${DEP_LIST})

MESSAGE(STATUS "Setting Done ")
# ----------------------------------------------- #